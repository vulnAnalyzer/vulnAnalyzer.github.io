package neu.lab.vulnerability;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.Map;
import java.util.Set;

public class OutPutVulnerability {
    private final static Logger log = LoggerFactory.getLogger(OutPutVulnerability.class);

    public void writeAnalyze(VulnerabilityInfo result) {
        String projectDir = "E:\\work4";
        if (!new File(projectDir).exists()) {
            new File(projectDir).mkdirs();
        }
        String resTxt = projectDir + File.separatorChar + "vulnerabilityInfo.txt";
        try (PrintWriter printer = new PrintWriter(new BufferedWriter(new FileWriter(resTxt, true)))) {
            StringBuilder sb = new StringBuilder();
            Vulnerability vulnerability = result.getVulnerability();
            sb.append(vulnerability.getName()).append(">>>>>").
                    append(vulnerability.getStatus()).append(">>>>>").
                    append(vulnerability.getCve_id()).append(">>>>>").
                    append(vulnerability.getCwe_id()).append(">>>>>").
                    append(vulnerability.getUrl()).append(">>>>>").
                    append(vulnerability.getSeverity_level()).append(">>>>>").
                    append(vulnerability.getSemver());
            Map<String, String> vulnerableAPI = result.getVulnerableAPI();
            for (Map.Entry<String, String> stringStringEntry : vulnerableAPI.entrySet()) {
                sb.append(">>>>>").append(stringStringEntry.getKey()).append("->").append(stringStringEntry.getValue());
            }
            printer.println(sb);
            sb.setLength(0);
        } catch (IOException e) {
            log.error("IOException");
        }
    }
}
