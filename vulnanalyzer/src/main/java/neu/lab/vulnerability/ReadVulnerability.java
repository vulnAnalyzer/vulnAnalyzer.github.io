package neu.lab.vulnerability;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.stream.JsonReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.*;

public class ReadVulnerability {
    private final static Logger log = LoggerFactory.getLogger(ReadVulnerability.class);

    public Map<String, Vulnerability> getVulnerability() {
        Map<String, Vulnerability> vulnerabilityMap = new HashMap<>();
        // 得到漏洞信息
        List<Vulnerability> vulnerabilities = readVulnerability();
        // 获取漏洞信息已补丁版本的形式G:A:V
        Set<String> gavs = new LinkedHashSet<>();
        for (Vulnerability vulnerability : vulnerabilities) {
            // 获取groupId:artifactId
            String name = vulnerability.getName();
            String[] patches = vulnerability.getStatus().replaceAll("[\r\n]+", "").split(";");
            // 获取补丁版本
            for (String patch : patches) {
                String ga = name + ":" + patch;
                gavs.add(ga);
                try {
                    String key = name.split(":")[1] + "-" + patch;
                    vulnerability.setStatus(patch);
                    Vulnerability vul = new Vulnerability();
                    vul.setName(name);
                    vul.setStatus(vulnerability.getStatus());
                    vul.setSemver(vulnerability.getSemver());
                    vul.setCwe_id(vulnerability.getCwe_id());
                    vul.setCve_id(vulnerability.getCve_id());
                    vul.setUrl(vulnerability.getUrl());
                    vul.setSeverity_level(vulnerability.getSeverity_level());
                    vul.setSeverity_score(vulnerability.getSeverity_score());
                    vul.setSnyk_id(vulnerability.getSnyk_id());
                    // artifactId:version
                    vulnerabilityMap.put(key, vul);
                }catch (Exception e){
                    log.info(ga);
                }
            }
        }
        // 输出到文件gav_list.txt文件中
        writeGavsToFile(gavs);
        return vulnerabilityMap;
    }

    /**
     * 从github_vulnerabilities.json文件中读取漏洞信息
     *
     * @return
     */
    private List<Vulnerability> readVulnerability() {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        try {
            // 从 classpath 加载资源文件
            InputStream is = JsonReader.class.getClassLoader().getResourceAsStream("github_vulnerabilities.json");
            if (is == null) {
                throw new RuntimeException("File not found in resources folder");
            }

            // 使用 Jackson 解析 JSON 数组
            ObjectMapper mapper = new ObjectMapper();
            vulnerabilities = mapper.readValue(is, new TypeReference<>() {
            });
        } catch (Exception e) {
            log.info(e.getMessage());
        }
        return vulnerabilities;
    }

    /**
     * 将内容写入gav_list.txt文件中
     *
     * @param gavs:所有补丁GAV
     */
    private void writeGavsToFile(Set<String> gavs) {
        try {
            // 写入文件
            File file = new File("src/main/resources/gav_list.txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                for (String gav : gavs) {
                    writer.write(gav);
                    writer.newLine();
                }
            }
            log.info("GAV list written to: {}", file.getAbsolutePath());
        } catch (Exception e) {
            log.info(e.getMessage());
        }
    }
}
